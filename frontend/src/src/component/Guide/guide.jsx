import { useState } from 'react';
import styles from './guide.module.scss';
import emailIcon from './img/icons8-c–æ–æ–±—â–µ–Ω–∏–µ-–æ–±–ª–∞—á–∫–æ.svg';

const Guide = () => {
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [message, setMessage] = useState('');
    const [showEmojis, setShowEmojis] = useState(false);
    const [chatMessages, setChatMessages] = useState([
        { text: '–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', isBot: true}
    ]);

    const emojis = [
        'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'üòÇ', 'ü§£', 'üòä', 'üòá', 
        'üôÇ', 'üôÉ', 'üòâ', 'üòå', 'üòç', 'ü•∞', 'üòò', 'üòó', 'üòô', 'üòö',
        'üòã', 'üòõ', 'üòù', 'üòú', 'ü§™', 'ü§®', 'üßê', 'ü§ì', 'üòé', 'ü§©',
        'ü•≥', 'üòè', 'üòí', 'üòû', 'üòî', 'üòü', 'üòï', 'üôÅ', '‚òπÔ∏è', 'üò£',
        'üòñ', 'üò´', 'üò©', 'ü•∫', 'üò¢', 'üò≠', 'üò§', 'üò†', 'üò°', 'ü§¨',
        'ü§Ø', 'üò≥', 'ü•µ', 'ü•∂', 'üò±', 'üò®', 'üò∞', 'üò•', 'üòì', 'ü§ó',
        'ü§î', 'ü§≠', 'ü§´', 'ü§•', 'üò∂', 'üòê', 'üòë', 'üò¨', 'üôÑ', 'üòØ',
        'üò¶', 'üòß', 'üòÆ', 'üò≤', 'ü•±', 'üò¥', 'ü§§', 'üò™', 'üòµ', 'ü§ê',
        'ü•¥', 'ü§¢', 'ü§Æ', 'ü§ß', 'üò∑', 'ü§í', 'ü§ï', 'ü§ë', 'ü§†', 'üòà',
        'üëø', 'üëπ', 'üë∫', 'ü§°', 'üí©', 'üëª', 'üíÄ', '‚ò†Ô∏è', 'üëΩ', 'üëæ',
        'ü§ñ', 'üéÉ', 'üò∫', 'üò∏', 'üòπ', 'üòª', 'üòº', 'üòΩ', 'üôÄ', 'üòø',
        'üòæ', 'üëã', 'ü§ö', 'üñêÔ∏è', '‚úã', 'üññ', 'üëå', 'ü§è', '‚úåÔ∏è', 'ü§û',
        'ü§ü', 'ü§ò', 'ü§ô', 'üëà', 'üëâ', 'üëÜ', 'üñï', 'üëá', '‚òùÔ∏è', 'üëç',
        'üëé', '‚úä', 'üëä', 'ü§õ', 'ü§ú', 'üëè', 'üôå', 'üëê', 'ü§≤', 'ü§ù',
        'üôè', '‚úçÔ∏è', 'üíÖ', 'ü§≥', 'üí™', 'ü¶æ', 'ü¶ø', 'ü¶µ', 'ü¶∂', 'üëÇ',
        'ü¶ª', 'üëÉ', 'üß†', 'ü¶∑', 'ü¶¥', 'üëÄ', 'üëÅÔ∏è', 'üëÖ', 'üëÑ', 'üë∂',
        'üßí', 'üë¶', 'üëß', 'üßë', 'üë®', 'üë©', 'üßî', 'üßì', 'üë¥', 'üëµ',
        'üôç', 'üôé', 'üôÖ', 'üôÜ', 'üíÅ', 'üôã', 'üßè', 'üôá', 'ü§¶', 'ü§∑',
        'üëÆ', 'üïµÔ∏è', 'üíÇ', 'ü•∑', 'üë∑', 'ü§¥', 'üë∏', 'üë≥', 'üë≤', 'üßï',
        'ü§µ', 'üë∞', 'ü§∞', 'ü§±', 'üëº', 'üéÖ', 'üßô', 'üßö', 'üßõ', 'üßú',
        'üßù', 'üßû', 'üßü', 'üíÜ', 'üíá', 'üö∂', 'üßç', 'üßé', 'üèÉ', 'üíÉ',
        'üï∫', 'üï¥Ô∏è', 'üëØ', 'üßñ', 'üßó', 'ü§∫', 'üèá', '‚õ∑Ô∏è', 'üèÇ', 'üèåÔ∏è',
        'üèÑ', 'üö£', 'üèä', '‚õπÔ∏è', 'üèãÔ∏è', 'üö¥', 'üöµ', 'ü§∏', 'ü§º', 'ü§Ω',
        'ü§æ', 'ü§π', 'üßò', 'üõÄ', 'üõå', 'üë≠', 'üë´', 'üë¨', 'üíè', 'üíë',
        'üë™', 'üó£Ô∏è', 'üë§', 'üë•', 'ü´Ç', 'üë£', 'ü¶∞', 'ü¶±', 'ü¶≥', 'ü¶≤'
    ];

    const modalOpen = () => setIsModalOpen(true);
    const modalClose = () => setIsModalOpen(false);

    const addEmoji = (emoji) => {
        setMessage(prev => prev + emoji);
    };

    const toggleEmojis = () => {
        setShowEmojis(!showEmojis);
    };

    const handleSendMessage = () => {
        if (message.trim() === '') return;

        setChatMessages([...chatMessages, { text: message, isBot: false }]);
        setMessage('');

        setTimeout(() => {
            setChatMessages(prev => [
                ...prev,
                {
                    text: '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', isBot: true
                }
            ])
        }, 1000)
    };

    return (
        <div className={styles.containerGuide}>
            {isModalOpen ? (
                <div className={styles.modalOverlay} onClick={modalClose}>
                    <div className={styles.chatContainer} onClick={(e) => e.stopPropagation()}>
                        <div className={styles.chatHeader}>
                        <h3>–ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π</h3>
                        <button className={styles.closeButton} onClick={modalClose}>
                            &times;
                        </button>
                        </div>
                        
                        <div className={styles.chatMessages}>
                        {chatMessages.map((msg, index) => (
                            <div 
                            key={index} 
                            className={`${styles.message} ${msg.isBot ? styles.botMessage : styles.userMessage}`}
                            >
                            {msg.text}
                            </div>
                        ))}
                        </div>
                        
                        {/* –ü–∞–Ω–µ–ª—å —Å–º–∞–π–ª–∏–∫–æ–≤ */}
                        {showEmojis && (
                        <div className={styles.emojiPanel}>
                            <div className={styles.emojiGrid}>
                            {emojis.map((emoji, index) => (
                                <span 
                                key={index} 
                                className={styles.emojiItem}
                                onClick={() => addEmoji(emoji)}
                                >
                                {emoji}
                                </span>
                            ))}
                            </div>
                        </div>
                        )}
                        
                        <div className={styles.chatInputContainer}>
                        <button 
                            className={styles.emojiToggle}
                            onClick={toggleEmojis}
                        >
                            üòä
                        </button>
                        <input
                            type="text"
                            value={message}
                            onChange={(e) => setMessage(e.target.value)}
                            placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                            className={styles.chatInput}
                            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                        />
                        <button 
                            className={styles.sendButton}
                            onClick={handleSendMessage}
                            disabled={!message.trim()}
                        >
                            ‚Üí
                        </button>
                        </div>
                    </div>
                </div>
            ):(
                <div className={styles.containerGuide__content} onClick={modalOpen}>
                    <img className={styles.containerGuide__content_img} src={emailIcon} alt="–ó–∞—è–≤–∫–∏ –ò–±—Ä–æ—Ö–∏–º" />
                </div>
            )}
        </div>
    )
}

export default Guide