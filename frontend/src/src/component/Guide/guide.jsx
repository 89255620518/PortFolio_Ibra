import { useState } from 'react';
import styles from './guide.module.scss';
import emailIcon from './img/icons8-c–æ–æ–±—â–µ–Ω–∏–µ-–æ–±–ª–∞—á–∫–æ.svg';
import AppService from '../../api/apiService';

const Guide = () => {
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [message, setMessage] = useState('');
    const [showEmojis, setShowEmojis] = useState(false);
    const [chatMessages, setChatMessages] = useState([
        { text: '–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', isBot: true }
    ]);
    const [formData, setFormData] = useState({
        first_name: '',
        email: '',
        phone_number: '',
        comments: '',
        privacy_policy_checked: false
    });
    const [errors, setErrors] = useState({});
    const [isSubmitted, setIsSubmitted] = useState(false);

    const emojis = [
        'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'üòÇ', 'ü§£', 'üòä', 'üòá', 
        'üôÇ', 'üôÉ', 'üòâ', 'üòå', 'üòç', 'ü•∞', 'üòò', 'üòó', 'üòô', 'üòö',
        'üòã', 'üòõ', 'üòù', 'üòú', 'ü§™', 'ü§®', 'üßê', 'ü§ì', 'üòé', 'ü§©',
        'ü•≥', 'üòè', 'üòí', 'üòû', 'üòî', 'üòü', 'üòï', 'üôÅ', '‚òπÔ∏è', 'üò£',
        'üòñ', 'üò´', 'üò©', 'ü•∫', 'üò¢', 'üò≠', 'üò§', 'üò†', 'üò°', 'ü§¨',
        'ü§Ø', 'üò≥', 'ü•µ', 'ü•∂', 'üò±', 'üò®', 'üò∞', 'üò•', 'üòì', 'ü§ó',
        'ü§î', 'ü§≠', 'ü§´', 'ü§•', 'üò∂', 'üòê', 'üòë', 'üò¨', 'üôÑ', 'üòØ',
        'üò¶', 'üòß', 'üòÆ', 'üò≤', 'ü•±', 'üò¥', 'ü§§', 'üò™', 'üòµ', 'ü§ê',
        'ü•¥', 'ü§¢', 'ü§Æ', 'ü§ß', 'üò∑', 'ü§í', 'ü§ï', 'ü§ë', 'ü§†', 'üòà',
        'üëø', 'üëπ', 'üë∫', 'ü§°', 'üí©', 'üëª', 'üíÄ', '‚ò†Ô∏è', 'üëΩ', 'üëæ',
        'ü§ñ', 'üéÉ', 'üò∫', 'üò∏', 'üòπ', 'üòª', 'üòº', 'üòΩ', 'üôÄ', 'üòø',
        'üòæ', 'üëã', 'ü§ö', 'üñêÔ∏è', '‚úã', 'üññ', 'üëå', 'ü§è', '‚úåÔ∏è', 'ü§û',
        'ü§ü', 'ü§ò', 'ü§ô', 'üëà', 'üëâ', 'üëÜ', 'üñï', 'üëá', '‚òùÔ∏è', 'üëç',
        'üëé', '‚úä', 'üëä', 'ü§õ', 'ü§ú', 'üëè', 'üôå', 'üëê', 'ü§≤', 'ü§ù',
        'üôè', '‚úçÔ∏è', 'üíÖ', 'ü§≥', 'üí™', 'ü¶æ', 'ü¶ø', 'ü¶µ', 'ü¶∂', 'üëÇ',
        'ü¶ª', 'üëÉ', 'üß†', 'ü¶∑', 'ü¶¥', 'üëÄ', 'üëÅÔ∏è', 'üëÖ', 'üëÑ', 'üë∂',
        'üßí', 'üë¶', 'üëß', 'üßë', 'üë®', 'üë©', 'üßî', 'üßì', 'üë¥', 'üëµ',
        'üôç', 'üôé', 'üôÖ', 'üôÜ', 'üíÅ', 'üôã', 'üßè', 'üôá', 'ü§¶', 'ü§∑',
        'üëÆ', 'üïµÔ∏è', 'üíÇ', 'ü•∑', 'üë∑', 'ü§¥', 'üë∏', 'üë≥', 'üë≤', 'üßï',
        'ü§µ', 'üë∞', 'ü§∞', 'ü§±', 'üëº', 'üéÖ', 'üßô', 'üßö', 'üßõ', 'üßú',
        'üßù', 'üßû', 'üßü', 'üíÜ', 'üíá', 'üö∂', 'üßç', 'üßé', 'üèÉ', 'üíÉ',
        'üï∫', 'üï¥Ô∏è', 'üëØ', 'üßñ', 'üßó', 'ü§∫', 'üèá', '‚õ∑Ô∏è', 'üèÇ', 'üèåÔ∏è',
        'üèÑ', 'üö£', 'üèä', '‚õπÔ∏è', 'üèãÔ∏è', 'üö¥', 'üöµ', 'ü§∏', 'ü§º', 'ü§Ω',
        'ü§æ', 'ü§π', 'üßò', 'üõÄ', 'üõå', 'üë≠', 'üë´', 'üë¨', 'üíè', 'üíë',
        'üë™', 'üó£Ô∏è', 'üë§', 'üë•', 'ü´Ç', 'üë£', 'ü¶∞', 'ü¶±', 'ü¶≥', 'ü¶≤'
    ];

    const modalOpen = () => setIsModalOpen(true);
    const modalClose = () => {
        setIsModalOpen(false);
        setIsSubmitted(false);
        setChatMessages([{ text: '–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', isBot: true }]);
    };

    const addEmoji = (emoji) => {
        setMessage(prev => prev + emoji);
    };

    const toggleEmojis = () => {
        setShowEmojis(!showEmojis);
    };

    const handleSendMessage = () => {
        if (message.trim() === '') return;

        const newMessages = [...chatMessages, { text: message, isBot: false }];
        setChatMessages(newMessages);
        setMessage('');

        setTimeout(() => {
            setChatMessages([
                ...newMessages,
                {
                    text: '–°–µ–π—á–∞—Å —è –Ω–µ –≤ —Å–µ—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.',
                    isBot: true,
                    showForm: true
                }
            ]);
        }, 1000);
    };

    const handleFormChange = (e) => {
        const { name, value, type, checked } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: type === 'checkbox' ? checked : value
        }));

        if (errors[name]) {
            setErrors(prev => {
                const newErrors = {...prev};
                delete newErrors[name];
                return newErrors;
            });
        }
    };

    const validateForm = () => {
        const newErrors = {};
        if (!formData.first_name.trim()) newErrors.first_name = '–í–≤–µ–¥–∏—Ç–µ –∏–º—è';
        if (!formData.email.trim()) newErrors.email = '–í–≤–µ–¥–∏—Ç–µ email';
        else if (!/^\S+@\S+\.\S+$/.test(formData.email)) newErrors.email = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
        if (!formData.phone_number.trim()) newErrors.phone_number = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω';
        if (!formData.comments.trim()) newErrors.comments = '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏';
        if (!formData.privacy_policy_checked) newErrors.privacy_policy_checked = '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ';

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };


    const handleFormSubmit = async (e) => {
        e.preventDefault();
        if (validateForm()) {
            try {
                const firstUserMessage = chatMessages.find(msg => !msg.isBot)?.text || '';
                const combinedComments = `–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞: ${firstUserMessage}\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: ${formData.comments}`;

                await AppService.createApplication({
                    ...formData,
                    comments: combinedComments,
                    privacy_policy_checked: true
                });
                setIsSubmitted(true);

                setTimeout(() => {
                    setFormData({
                        first_name: "",
                        email: "",
                        phone_number: "",
                        comments: "",
                        privacy_policy_checked: false
                    });
                    setIsSubmitted(false);
                    modalClose();
                }, 3500);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
                setErrors({ submit: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã' });
            }
        }
    };

    return (
        <div className={styles.containerGuide}>
            {isModalOpen ? (
                <div className={styles.modalOverlay} onClick={modalClose}>
                    <div className={styles.chatContainer} onClick={(e) => e.stopPropagation()}>
                        <div className={styles.chatHeader}>
                            <h3>–ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π</h3>
                            <button className={styles.closeButton} onClick={modalClose}>
                                &times;
                            </button>
                        </div>
                        
                        <div className={styles.chatMessages}>
                            {chatMessages.map((msg, index) => (
                                <div 
                                    key={index} 
                                    className={`${styles.message} ${msg.isBot ? styles.botMessage : styles.userMessage}`}
                                >
                                    {msg.text}
                                    {msg.showForm && !isSubmitted && (
                                        <form className={styles.contactForm} onSubmit={handleFormSubmit}>
                                            <div className={styles.formGroup}>
                                                <input
                                                    type="text"
                                                    name="first_name"
                                                    placeholder="–í–∞—à–µ –∏–º—è"
                                                    value={formData.first_name}
                                                    onChange={handleFormChange}
                                                    className={`${styles.contactForm_input} ${errors.first_name ? styles.error : ''}`}
                                                />
                                                {errors.first_name && <span className={styles.errorText}>{errors.first_name}</span>}
                                            </div>

                                            <div className={styles.formGroup}>
                                                <input
                                                    type="email"
                                                    name="email"
                                                    placeholder="–í–∞—à email"
                                                    value={formData.email}
                                                    onChange={handleFormChange}
                                                    className={`${styles.contactForm_input} ${errors.email ? styles.error : ''}`}
                                                />
                                                {errors.email && <span className={styles.errorText}>{errors.email}</span>}
                                            </div>

                                            <div className={styles.formGroup}>
                                                <input
                                                    type="tel"
                                                    name="phone_number"
                                                    placeholder="–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω"
                                                    value={formData.phone_number}
                                                    onChange={handleFormChange}
                                                    className={`${styles.contactForm_input} ${errors.phone_number ? styles.error : ''}`}
                                                />
                                                {errors.phone_number && <span className={styles.errorText}>{errors.phone_number}</span>}
                                            </div>

                                            <div className={styles.formGroup}>
                                                <textarea
                                                    name="comments"
                                                    placeholder="–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                                                    value={formData.comments}
                                                    onChange={handleFormChange}
                                                    className={`${styles.contactForm_input} ${errors.comments ? styles.error : ''}`}
                                                />
                                                {errors.comments && <span className={styles.errorText}>{errors.comments}</span>}
                                            </div>

                                            <div className={`${styles.checkboxGroup} ${errors.privacy_policy_checked ? styles.errorChek : ''}`}>
                                                <label className={styles.checkboxGroup__label}>
                                                    <input
                                                        type="checkbox"
                                                        name="privacy_policy_checked"
                                                        checked={formData.privacy_policy_checked}
                                                        onChange={handleFormChange}
                                                    />
                                                    –Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
                                                </label>
                                            </div>
                                            {errors.privacy_policy_checked && (
                                                <span className={styles.errorText}>{errors.privacy_policy_checked}</span>
                                            )}

                                            <button type="submit" className={styles.submitButton}>
                                                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
                                            </button>
                                        </form>
                                    )}
                                </div>
                            ))}
                            
                            {isSubmitted && (
                                <div className={`${styles.message} ${styles.botMessage}`}>
                                    –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.
                                </div>
                            )}
                        </div>
                        
                        {!chatMessages.some(msg => msg.showForm) && !isSubmitted && (
                            <>
                                {showEmojis && (
                                    <div className={styles.emojiPanel}>
                                        <div className={styles.emojiGrid}>
                                            {emojis.map((emoji, index) => (
                                                <span 
                                                    key={index} 
                                                    className={styles.emojiItem}
                                                    onClick={() => addEmoji(emoji)}
                                                >
                                                    {emoji}
                                                </span>
                                            ))}
                                        </div>
                                    </div>
                                )}
                                
                                <div className={styles.chatInputContainer}>
                                    <button 
                                        className={styles.emojiToggle}
                                        onClick={toggleEmojis}
                                    >
                                        üòä
                                    </button>
                                    <input
                                        type="text"
                                        value={message}
                                        onChange={(e) => setMessage(e.target.value)}
                                        placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                                        className={styles.chatInput}
                                        onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                                    />
                                    <button 
                                        className={styles.sendButton}
                                        onClick={handleSendMessage}
                                        disabled={!message.trim()}
                                    >
                                        ‚Üí
                                    </button>
                                </div>
                            </>
                        )}
                    </div>
                </div>
            ) : (
                <div className={styles.containerGuide__content} onClick={modalOpen}>
                    <img className={styles.containerGuide__content_img} src={emailIcon} alt="–ó–∞—è–≤–∫–∏ –ò–±—Ä–æ—Ö–∏–º" />
                </div>
            )}
        </div>
    );
};

export default Guide;